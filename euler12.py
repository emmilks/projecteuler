"""
euler12.py

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number
would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
"""

from project_euler import get_factors


def triangle_numbers(n):
    return (n * (n + 1)) // 2


divisors = 1
nums = 1

while divisors < 500:
    triangle = triangle_numbers(nums)
    triangle_factors = get_factors(triangle)
    if len(triangle_factors) > divisors:
        divisors = len(triangle_factors)
    nums += 1

print(triangle)
